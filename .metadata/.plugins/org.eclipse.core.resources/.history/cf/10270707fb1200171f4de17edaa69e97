package ctci.solutions.aritra;

/*
 * Question: A circus is designing a tower routine consisting of people standing atop one another's shoulders. For practical and aesthetic reasons,each person must be both
 * shorter and lighter than the person below him or her. Given the heights and weights of each person in the circus, write a method to compute the largest possible number
 * of people in such a tower.
 * 
 * Solution: We have a list of pairs of items. Find the longest sequence such that both the first and second items are in non-decreasing order.
 * One thing we might first try is sorting the items on an attribute. This is useful actually, but it won't get us all the way there.
 * By sorting the items by height, we have a relative order the items must appear in. We still need to find the longest increasing subsequence of weight though.
 * In the recursive approach, we need to essentially try all the possibilities. After sorting by height, we iterate through the array. At each element, we branch into
 * two choices: add this element to the subsequence (if it's valid) or do not.
 */

public class CircusTower {
	
}

class HtWt implements Comparable<HtWt>{
	private int height;
	private int weight;
	public HtWt(int h, int w){
		height = h;
		weight = w;
	}
	
	public int compareTo(HtWt second){
		if(this.height != second.height){
			return ((Integer) this.height).compareTo(second.height);
		}else{
			return ((Integer)this.weight).compareTo(second.weight);
		}
	}
	
	//Returns true if this should be lined up before other. Note that its possible that
	//this.isBefore(other) and other.isBefore(this) are both false. This is different from the compareTo method, where if a < b then b > a
	public boolean isBefore(HtWt other){
		if(height < other.height && weight < other.weight){
			return true;
		}else{
			return false;
		}
	}
}
